---
name: CI

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]

env:
  FORCE_COLOR: "1" # Make tools pretty.
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  SETUPTOOLS_SCM_PRETEND_VERSION: "1.0" # avoid warnings about shallow checkout

jobs:
  tests:
    name: Tests & API type-check on ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: pip

      - run: python -Im pip install tox

      - run: tox run -f py$(echo ${{ matrix.python-version }} | tr -d .)
      - run: tox run -e mypy-api

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pip

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage and fail if it's <100%.
        run: |
          python -Im pip install --upgrade coverage[toml]

          python -Im coverage combine
          python -Im coverage html --skip-covered --skip-empty

          # Report and write to summary.
          python -Im coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY

          # Report again and fail if under 100%.
          python -Im coverage report --fail-under=100

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  mypy:
    name: Type-check package

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          allow-prereleases: true
          cache: pip

      - name: Prepare & run tox
        run: |
          python -Im pip install tox
          python -Im tox run -e mypy-pkg

  docs:
    name: Build docs & run doctests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          # Keep in sync with tox.ini/docs & .readthedocs.yaml
          python-version: "3.11"
          cache: pip

      - run: |
          python -Im pip install tox
          tox run -e docs

  install-dev:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    name: Verify dev env
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pip

      - run: python -Im pip install -e .[dev]
      - run: python -Ic 'import pem; print(pem.__version__)'

  required-checks-pass:
    name: Ensure everything required is passing for branch protection.
    if: always()
    runs-on: ubuntu-latest
    needs:
      - coverage
      - docs
      - install-dev

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
